From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Phoenix616 <max@themoep.de>
Date: Mon, 19 Oct 2020 17:20:53 +0100
Subject: [PATCH] Origami - Fix ProtocolLib issues on Java 15


diff --git a/src/main/java/net/minecraft/server/NetworkManager.java b/src/main/java/net/minecraft/server/NetworkManager.java
<<<<<<< HEAD:patches/Purpur/patches/server/0138-Origami-Fix-ProtocolLib-issues-on-Java-15.patch
index 12df0d8bd73e803d63985673a3a6c7a582ac1df8..66cd8e53cf8ef2a143bff7aa2ee421a4466083b0 100644
=======
index d93634391501da01cb1afe70fedd5247c654e8fc..53b5063b43e42f09c2ef335251c91d2051676972 100644
>>>>>>> ver/1.16.5:patches/Purpur/patches/server/0134-Origami-Fix-ProtocolLib-issues-on-Java-15.patch
--- a/src/main/java/net/minecraft/server/NetworkManager.java
+++ b/src/main/java/net/minecraft/server/NetworkManager.java
@@ -416,9 +416,9 @@ public class NetworkManager extends SimpleChannelInboundHandler<Packet<?>> {
             // note: since the type is not dynamic here, we need to actually copy the old executor code
             // into two branches. On conflict, just re-copy - no changes were made inside the executor code.
             if (flush) {
-                choice1 = () -> {
+                choice1 = new Runnable() { public void run() { // Origami - flatten lambda
                     if (enumprotocol != enumprotocol1) {
-                        this.setProtocol(enumprotocol);
+                        NetworkManager.this.setProtocol(enumprotocol); // Origami - flatten lambda
                     }
 
                     // Paper start
@@ -428,7 +428,7 @@ public class NetworkManager extends SimpleChannelInboundHandler<Packet<?>> {
                     }
                     try {
                         // Paper end
-                        ChannelFuture channelfuture1 = (flush) ? this.channel.writeAndFlush(packet) : this.channel.write(packet); // Tuinity - add flush parameter
+                        ChannelFuture channelfuture1 = (flush) ? NetworkManager.this.channel.writeAndFlush(packet) : NetworkManager.this.channel.write(packet); // Tuinity - add flush parameter // Origami - flatten lambda
 
 
                         if (genericfuturelistener != null) {
@@ -448,12 +448,12 @@ public class NetworkManager extends SimpleChannelInboundHandler<Packet<?>> {
                         packet.onPacketDispatchFinish(player, null);
                     }
                     // Paper end
-                };
+                }}; // Origami - flatten lambda
             } else {
                 // explicitly declare a variable to make the lambda use the type
-                choice2 = () -> {
+                choice2 = new AbstractEventExecutor.LazyRunnable() { public void run() { // Origami - flatten lambda
                     if (enumprotocol != enumprotocol1) {
-                        this.setProtocol(enumprotocol);
+                        NetworkManager.this.setProtocol(enumprotocol); // Origami - flatten lambda
                     }
 
                     // Paper start
@@ -463,7 +463,7 @@ public class NetworkManager extends SimpleChannelInboundHandler<Packet<?>> {
                     }
                     try {
                         // Paper end
-                        ChannelFuture channelfuture1 = (flush) ? this.channel.writeAndFlush(packet) : this.channel.write(packet); // Tuinity - add flush parameter
+                        ChannelFuture channelfuture1 = (flush) ? NetworkManager.this.channel.writeAndFlush(packet) : NetworkManager.this.channel.write(packet); // Tuinity - add flush parameter // Origami - flatten lambda
 
 
                         if (genericfuturelistener != null) {
@@ -483,7 +483,7 @@ public class NetworkManager extends SimpleChannelInboundHandler<Packet<?>> {
                         packet.onPacketDispatchFinish(player, null);
                     }
                     // Paper end
-                };
+                }}; // Origami - flatten lambda
             }
             this.channel.eventLoop().execute(choice1 != null ? choice1 : choice2);
             // Tuinity end - optimise packets that are not flushed
